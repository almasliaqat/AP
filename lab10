package pk.edu.nust.seecs.gradebook.util;

import newpackage.dir;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.Scanner;
import javax.imageio.spi.ServiceRegistry;
import javax.persistence.Query;
import org.hibernate.Session;
import org.hibernate.cfg.AnnotationConfiguration;
import org.hibernate.SessionFactory;
import org.hibernate.Transaction;
import org.hibernate.boot.registry.StandardServiceRegistry;
import org.hibernate.boot.registry.StandardServiceRegistryBuilder;
import org.hibernate.cfg.Configuration;
import sun.misc.Hashing;


/**
 * Hibernate Utility class with a convenient method to get Session Factory
 * object.
 *
 * @author fahad
 */
public class HibernateUtil {

    static String fname;
    
    
    
    public static String make_hash(String fname) throws NoSuchAlgorithmException, IOException
    {
        String path = fname;
MessageDigest md = MessageDigest.getInstance("MD5");
md.update(Files.readAllBytes(Paths.get(path)));
byte[] digest = md.digest();
return digest.toString();
    }    
    
    public static void main(String[] args) throws NoSuchAlgorithmException, IOException {  
		//creating configuration object  
		Configuration cfg=new Configuration();  
		cfg.configure("hibernate.cfg.xml");//populates the data of the configuration file  
		//creating seession factory object  
		StandardServiceRegistry serviceRegistry = new StandardServiceRegistryBuilder().applySettings(cfg.getProperties()). build();
		SessionFactory factory=cfg.buildSessionFactory(serviceRegistry);
		//creating session object  
		Session session=factory.openSession();  
			//creating transaction object  
			Transaction t=session.beginTransaction();  
			dir e1=new dir();  
                        e1.setfile_name(fname);  
			e1.setfile_hash (make_hash(fname));  
			session.persist(e1);//persisting the object  
			t.commit();//transaction is commited  
		session.close();  
	}  

    
    
     public static dir retrieveFrom(String fname) {
  AnnotationConfiguration config = new AnnotationConfiguration();
  config.addAnnotatedClass(dir.class);
  SessionFactory factory= config.configure().buildSessionFactory();
  Session session = factory.getCurrentSession();
  session.beginTransaction();/*lets hope an id of 1 exists!*/
  String queryString = "from files where file_name = :fname";
        org.hibernate.Query query = session.createQuery(queryString);
  query.setString("file_name", fname);
  Object queryResult = query.uniqueResult();
  dir user = (dir)queryResult;session.getTransaction().commit();
  return user;
 }
    
    public void matched() throws NoSuchAlgorithmException, IOException
    {
        Scanner in = new Scanner(System.in);
    String fname;
      System.out.println("Enter a file");
      fname = in.nextLine();
      dir user=(dir)retrieveFrom(fname);  
      if(make_hash(user.getfile_hash())!=make_hash(fname))
          System.out.println("File not matched");
    }
    
    
    
    
    
   
}
