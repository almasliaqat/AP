/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package lab9;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.nio.charset.Charset;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Scanner;

/**
 *
 * @author aliaqat.bscs13seecs
 */
public class Lab9 {
    
   static ArrayList<String> lines = new ArrayList<String>();
    static ArrayList<String> errors = new ArrayList<String>();
     static  HashMap<String,Integer> map=new HashMap<String,Integer>(); 
    
     
     
     public static boolean isNumeric(String str)
{
    for (char c : str.toCharArray())
    {
        if (!Character.isDigit(c)) return false;
    }
    return true;
}
     
     public static boolean isVariable (String str)
     {
         if(map.containsKey(str)){
			//key exists
			return true;
		}else{
			return false;
		}
     }
     
     
    public static void read() throws FileNotFoundException
    {
        
        BufferedReader myfile=null;
        try {
			String sCurrentLine;

			myfile = new BufferedReader(new FileReader("C:\\Users\\aliaqat.bscs13seecs\\Desktop\\code.txt"));

			while ((sCurrentLine = myfile.readLine()) != null) {
			lines.add(sCurrentLine);	
                        
			}

		} catch (IOException e) {
			e.printStackTrace();
		}
        
    }   
    
    
    public static void LetCheck(String line,int num)
    {
        String[] words=line.split(" ");
        
        //Checking whther variable name exists
        
        if(!(words.length==1))
        {
            //Checking whther variable name starting from numeric
        
           if(Character.isDigit(words[1].charAt(0)))
               errors.add ("Variable name Starting from Numeric character at Line "+num) ;
           else
               System.out.println("fine");
           
           //Chechking for non space variable names
           if((words.length>2))
           {
               if(!(words[2].equals("=")))
                   errors.add ("Variable name have a space at Line "+num) ;
                  else
               {    if(words.length==3)
                       errors.add ("Variable value not specified at Line "+num) ;
               else
                        if(words.length<=6)
                        {
                            if ((words.length==4))
                                    {
                                         if(isVariable(words[3])) 
                                            map.put(words[1],map.get(words[3]));
                                         else
                                        if(isNumeric(words[3])) 
                                            map.put(words[1],Integer.parseInt(words[3]));
                                        else
                                            errors.add ("Variable not exist with this name at Line "+num) ;
                                      
                                           
                                    }
                            
                             if ((words.length==5))
                                 errors.add ("Arguments missing for assigning value at line "+num) ;
                             
                             if ((words.length==6))
                             {
                                 if(words[4].equals("+") || words[4].equals("-") || words[4].equals("*") ||words[4].equals("\\") )
                                 {
                                    if(isVariable(words[3])  && isVariable(words[5])) 
                                            map.put(words[1],map.get(words[3])+map.get(words[5]));
                                         else
                                        if(isNumeric(words[3]) && isNumeric(words[5])) 
                                            map.put(words[1],Integer.parseInt(words[3]) + Integer.parseInt(words[5]));
                                    else
                                            if(isNumeric(words[3]) && isVariable(words[5])) 
                                               map.put(words[1],Integer.parseInt(words[3]) +  map.get(words[5]));
                                    
                                           if(isVariable(words[3]) && isNumeric(words[5])) 
                                               map.put(words[1],map.get(words[3]) + Integer.parseInt(words[5]));
                                 }
                                 else
                                 errors.add ("Operand not specified at line : "+num) ;
                             }
                                
                        }
                            }            
              
           }
               
        }
        else
        {   
           errors.add ("Variable name not specified After Let at Line "+num) ;
        }
        
    }
    
    
    public static void PrintCheck(String line, int num)
    {
        String[] words=line.split(" ");
        
        //Checking whther variable name exists
        
        if(!(words.length==1))
        {
                  
           
           if((words.length>1))
           {
               if(words.length<=4)
                        {
                            if ((words.length==2))
                                    {
                                         if(isVariable(words[1])) 
                                            System.out.println(map.get(words[1]));
                                                                                 else
                                            errors.add ("Variable not exist with this name at Line "+num) ;
                                      
                                           
                                    }
                            
                             if ((words.length==3))
                                 errors.add ("Arguments missing for printing value at line "+num) ;
                             
                             if ((words.length==4))
                             {
                                 if(words[2].equals("+") || words[2].equals("-") || words[2].equals("*") ||words[2].equals("\\") )
                                 {
                                    if(isVariable(words[3])  && isVariable(words[5])) 
                                         System.out.println(map.get(words[3])+map.get(words[5]));
                                           
                                         else
                                        if(isNumeric(words[3]) && isNumeric(words[5])) 
                                            System.out.println(map.get(words[3])+Integer.parseInt(words[3]) + Integer.parseInt(words[5]));
                                            
                                    else
                                            if(isNumeric(words[3]) && isVariable(words[5]))
                                                System.out.println(Integer.parseInt(words[3]) +  map.get(words[5]));
                                               
                                    
                                           if(isVariable(words[3]) && isNumeric(words[5])) 
                                                System.out.println(map.get(words[3]) + Integer.parseInt(words[5]));
                                               
                                 }
                                 else
                                 errors.add ("Operand not specified at line : "+num) ;
                             }
                                
                        }           
              
           }
               
        }
        else
        {   
           System.out.println("") ;
        }
    }
    
    
    
     public static void varCheck(String line, int num)
    {
        String[] words=line.split(" ");
        
        //Checking whther variable name exists
        
        if(!(words.length==1))
        {
                  
           if(isVariable(words[1]))
           {
           if((words.length>1))
           {
               if(words.length<=5)
                        {
                            if ((words.length==3))
                                    {
                                        if(words[1].equals("="))
                                        {
                                         if(isVariable(words[2])) 
                                            System.out.println(map.get(words[2]));
                                                                                 else
                                            errors.add ("Variable not exist with this name at Line "+num) ;
                                        }
                                        else
                                             errors.add ("This is not a statement at Line "+num) ;
                                           
                                    }
                            
                             if ((words.length==4))
                                 errors.add ("Arguments missing for printing value at line "+num) ;
                             
                             if ((words.length==5))
                             {
                                 if(words[3].equals("+") || words[3].equals("-") || words[3].equals("*") ||words[3].equals("\\") )
                                 {
                                    if(isVariable(words[2])  && isVariable(words[4])) 
                                         map.put(words[0],map.get(words[2])+map.get(words[4]));
                                           
                                         else
                                        if(isNumeric(words[2]) && isNumeric(words[4])) 
                                            map.put(words[0],Integer.parseInt(words[2]) + Integer.parseInt(words[4]));
                                            
                                    else
                                            if(isNumeric(words[2]) && isVariable(words[4]))
                                                map.put(words[0],Integer.parseInt(words[2]) +  map.get(words[4]));
                                               
                                    
                                           if(isVariable(words[2]) && isNumeric(words[4])) 
                                                map.put(words[0],map.get(words[2]) + Integer.parseInt(words[4]));
                                               
                                 }
                                 else
                                 errors.add ("Operand not specified at line : "+num) ;
                             }
                                
                        }           
              
           }
           }
           else
             errors.add ("Variable not with this name at line : "+num) ;  
        }
        else
        {   
            errors.add ("Statemetn not specified at line : "+num) ;
        }
    }
    
    
    public static void check()
    {
        
        for(int i=0;i<lines.size();i++)
        {
       String[] words=lines.get(i).split(" ");
        
              switch (words[0]) {
            case "Let":  
                LetCheck(lines.get(i),i);
                     break;
                case "Print":  
                PrintCheck(lines.get(i),i);
                     break;
                default:
                    varCheck(lines.get(i),i);
                    break;
        }
        
    }
    }
    

    /**
     * @param args the command line arguments
     */

    /**
     *
     * @param args the command line arguments
     * @throws java.io.FileNotFoundException
     */
    public static void main(String[] args) throws FileNotFoundException {
        // TODO code application logic here
        read();
        check();
        for(int i=0;i<errors.size();i++)
            System.out.println(errors.get(i));
    }
    
}
